package roque;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.event.*;
import javax.swing.table.*;

import java.awt.*;
import java.awt.event.*;
import java.util.Vector;

public class rque extends JFrame {

	ImageIcon Logo = new ImageIcon(new ImageIcon("Logo.png").getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH));
	Toolkit ToolK = getToolkit();
	Dimension Size = ToolK.getScreenSize();

	JLabel Info = new JLabel(); //INFORMATION DETAILS
	JLabel[] Label = new JLabel[8]; //LABELS BESIDE TEXTBOX
	JTextField[] TField = new JTextField[8];
	JButton[] Buttons1 = new JButton[3]; //STOCK IN, ADD, EDIT
	JButton[] Buttons2 = new JButton[3]; //DELETE, SAVE, CANCEL
	int StockCountLimit = 250; //CHANGE FOR STOCK COUNT REMARK
	
	//BUTTON NAMES
	String[] ButtonText = {
			"Stock In",
			"Add",
			"Edit",
			"Delete",
			"Save",
			"Cancel"
	};
	
	//HEADER NAMES
	String[] Row = new String [] {
		"Item Code",
		"Item Name",
		"Item Description",
		"Price",
		"Size",
		"Stocks",
		"Re-Order Point",
		"Remarks",
	};
	
	//EXTRA BLANK LINES SO IT CENTERS THE WHOLE THING IDK WHY BUT IF IT WORKS IT WORKS 
	String[][] Column = new String [][] {
		{"", "", "", "", "", "", "", ""},
		{"", "", "", "", "", "", "", ""},
		{"", "", "", "", "", "", "", ""},
		{"", "", "", "", "", "", "", ""},
		{"", "", "", "", "", "", "", ""},
		{"", "", "", "", "", "", "", ""},
		{"", "", "", "", "", "", "", ""},
		{"", "", "", "", "", "", "", ""},
	    ;
	
	//TABLEMODEL THAT IS ALSO DISABLED FROM EDITING INSIDE THE TABLE
	DefaultTableModel Model = new DefaultTableModel(Column, Row){
	    @Override
	    public boolean isCellEditable(int row, int column) {
	        return false;
	    }
	};
	
	//PANEL
	JTable Table = new JTable(Model);
	JScrollPane Scroll = new JScrollPane(Table);
	JPanel Panel = new JPanel(new BorderLayout());
	Vector<String> r = new Vector<String>();
	
	int Code = 2; //COUNTER FOR ITEM CODE
	
	rque(){
		setSize(950, 500);
		setLocation(Size.width/2 - getWidth()/2, Size.height/2 - getHeight()/2);
		getContentPane().setBackground(Color.decode("#34343c"));
		setResizable(false);
		setTitle("Inventory");
		setIconImage(Logo.getImage());
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		Info = new JLabel("INFORMATION DETAILS");
		Info.setBounds(20, 10, 300, 30);
		Info.setFont(new Font("Arial", Font.BOLD, 18));
		Info.setForeground(Color.white);
		
		int y = 50; //Y Of LABELS
		for (int i = 0; i < Label.length; i++) {
			Label[i] = new JLabel(Row[i] + ":");
			Label[i].setBounds(40, y, 200, 30);
			Label[i].setFont(new Font("Arial", Font.PLAIN, 16));
			Label[i].setForeground(Color.white);
			add(Label[i]);
			
			TField[i] = new JTextField();
			TField[i].setBounds(190, y, 250, 25);
			TField[i].setFont(new Font("Arial", Font.PLAIN, 14));
			TField[i].setForeground(Color.black);
			TField[i].setBorder(BorderFactory.createLineBorder(Color.black, 1));
			TField[i].setEditable(false);
			add(TField[i]);
			
			y += 30;
		}
		
		int y1 = 70; //Y FOR BUTTONS
		for (int i = 0; i < Buttons1.length; i++) {
			Buttons1[i] = new JButton(ButtonText[i]);
			Buttons2[i] = new JButton(ButtonText[i+3]);
			Buttons1[i].setBounds(y1, 305, 100, 50);
			Buttons2[i].setBounds(y1, 360, 100, 50);
			
			Buttons1[i].setFont(new Font("Arial", Font.PLAIN, 14));
			Buttons1[i].setForeground(Color.black);
			Buttons2[i].setFont(new Font("Arial", Font.PLAIN, 14));
			Buttons2[i].setForeground(Color.black);
			Buttons1[i].setFocusable(false);
			Buttons2[i].setFocusable(false);
			Buttons1[i].setBackground(Color.white);
			Buttons2[i].setBackground(Color.white);
			Buttons1[i].setOpaque(true);
			Buttons2[i].setOpaque(true);
			Buttons1[i].setEnabled(true);
			Buttons2[i].setEnabled(true);
			y1 += 110;
			add(Buttons1[i]);
			add(Buttons2[i]);
		}
		
		//CLICK AN ITEM FROM THE TABLE IT SHOWS IN THE TEXTFIELDS
		Table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
		    @Override
		    public void valueChanged(ListSelectionEvent e) {
		        if (Buttons2[1].isEnabled() == false && Buttons2[2].isEnabled() == false) {
		            int selectedRow = Table.getSelectedRow();
		            if (selectedRow >= 0) {
		                for (int i = 0; i < Model.getColumnCount(); i++) {
		                    TField[i].setText((String) Table.getValueAt(selectedRow, i));
		                }
		            }
		        }
		    }
		});
		
		
		Buttons1[0].addActionListener(new ActionListener() { //STOCK IN
			public void actionPerformed(ActionEvent e) {
				int selectedRow = Table.getSelectedRow(); //GETS SELECTED ROW
				if (selectedRow >= 0) { //IF MERON THEN EXECUTE BELOW
					
					//INPUT MESSAGE
					String Conf = JOptionPane.showInputDialog(null, "Enter new stock count", "Stock Count", JOptionPane.INFORMATION_MESSAGE);
					
					if (Conf.isBlank()) {} //IF WALANG ININPUT LEAVE IT AS IS
					else { //IF MERON THEN 
						Table.setValueAt(Conf, selectedRow, 5); //CHANGE STOCKS OF SELECTED ROW
						
						if(!Conf.matches("[0-9]+")) { //CHANGE REMARKS OF SELECTED ROW ONCE NEW STOCKS IS INPUTTED
							Table.setValueAt("", selectedRow, 7);
						} else if (Integer.parseInt(Conf) > StockCountLimit) {
							Table.setValueAt("High Stock", selectedRow, 7);
						} else {
							Table.setValueAt("Low Stock", selectedRow, 7);
						}
						
						for (int i = 0; i < Model.getColumnCount(); i++) { //UPDATES THE TEXTFIELDS
			                TField[i].setText((String) Table.getValueAt(selectedRow, i));
			            }         
					}
				} else { //IF WALA THEN EXECUTE BELOW
					JOptionPane.showMessageDialog(null, "Select an Item first", "No Item selected", JOptionPane.WARNING_MESSAGE);
				}
			}
		});
		
		
		Buttons1[1].addActionListener(new ActionListener() { //ADD
			public void actionPerformed(ActionEvent e) {
				
				//ENABLES ONLY SAVE AND CANCEL
				Buttons1[0].setEnabled(false);
				Buttons1[1].setEnabled(false);
				Buttons1[2].setEnabled(false);
				Buttons2[0].setEnabled(false);
				Buttons2[1].setEnabled(true);
				Buttons2[2].setEnabled(true);
	
				//ADDS THE INITIAL ITEM CODE FOR YOU AND ENABLES ALL TEXTFIELD BUT ITEM CODE AND REMARK
				for (int i =0; i < TField.length; i++) {
					if (i == 0) {
						TField[0].setText(String.format("%05d",Code));
					} else if (i > 0 && i < 7){
						TField[i].setEditable(true);
						TField[i].setText("");
					} else if (i == 7){
						TField[i].setEditable(false);
						TField[i].setText("");
					}
				}
				
				Buttons2[1].addActionListener(new ActionListener() { //SAVE
					public void actionPerformed(ActionEvent e) {
						
						//ADDS THE INITIAL ITEM CODE FOR YOU IN THE VECTOR AND INCREASES BY 1 THEN GRABS THE REST OF THE DATA
						for (int i =0; i < TField.length-1; i++) { 
							if (i == 0) {
								r.add(String.format("%05d", Code));
								Code += 1;
							} else {
								r.add(TField[i].getText());
							}	
						}
						
						//REMARKS IF EMPTY/INVALID FOR STOCK THEN OUTPUT NONE
						//REMARKS IF NUMBER HIGH OR LOW BASED ON STOCKCOUNTLIMIT ON LINE 22
						if(TField[5].getText().isBlank() || TField[5].getText().matches("[0-9]")) {
							r.add("");
						} else if (Integer.parseInt(TField[5].getText()) > StockCountLimit) {
							r.add("High Stock");
						} else {
							r.add("Low Stock");
						}
						
						//ADDS ROW AND CLEARS VECTOR DATA
						Model.addRow(r);
						r = new Vector<String>();
						
						//DISABLES ALL TEXTFIELD AND CLEARS
						for (int i =0; i < TField.length-1; i++) {
							TField[i].setEditable(false);
							TField[i].setText("");
						}
						
						//ENABLES ALL BUTTONS BUT SAVE AND CANCEL THEN REMOVE THE ACTION LISTENER FOR SAVE AND CANCEL
						Buttons1[0].setEnabled(true);
						Buttons1[1].setEnabled(true);
						Buttons1[2].setEnabled(true);
						Buttons2[0].setEnabled(true);
						Buttons2[1].setEnabled(false);
						Buttons2[2].setEnabled(false);
						Buttons2[1].removeActionListener(Buttons2[1].getActionListeners()[0]);
						Buttons2[2].removeActionListener(Buttons2[2].getActionListeners()[0]);
					}
				});
					
				Buttons2[2].addActionListener(new ActionListener() { //CANCEL
					public void actionPerformed(ActionEvent e) {
						//UPDATES TEXTFIELD/GETS THE OLD DATA YOU SELECTED
						//IF NONE THEN CLEAR TEXTFIELD
						int selectedRow = Table.getSelectedRow();
						if (selectedRow >= 0) { //MAKES SURE THAT THERE IS SOMETHING SELESCTED
							for (int i = 0; i < Model.getColumnCount(); i++) {
				                TField[i].setText((String) Table.getValueAt(selectedRow, i));
				                TField[i].setEditable(false);
				            }
						} else {
							for (int i =0; i < TField.length-1; i++) {
								TField[i].setEditable(false);
								TField[i].setText("");
							}
						}
						
						//ENABLES ALL BUTTONS BUT SAVE AND CANCEL THEN REMOVE THE ACTION LISTENER FOR SAVE AND CANCEL
						Buttons1[0].setEnabled(true);
						Buttons1[1].setEnabled(true);
						Buttons1[2].setEnabled(true);
						Buttons2[0].setEnabled(true);
						Buttons2[1].setEnabled(false);
						Buttons2[2].setEnabled(false);
						Buttons2[1].removeActionListener(Buttons2[1].getActionListeners()[0]);
						Buttons2[2].removeActionListener(Buttons2[2].getActionListeners()[0]);
					}
				});
			}
		});
		
		Buttons1[2].addActionListener(new ActionListener() { //EDIT
		    public void actionPerformed(ActionEvent e) {
		        
		    	//GETS SELECTED DATA
				//IF NONE THEN CLEAR TEXTFIELD
		    	int selectedRow = Table.getSelectedRow();
		        if (selectedRow >= 0) { //MAKES SURE THAT THERE IS SOMETHING SELESCTED
		            for (int i = 0; i < Model.getColumnCount(); i++) {
		                TField[i].setText((String) Table.getValueAt(selectedRow, i));
		            }
		            
		            //ENABLES TEXTFIELDS BUT ITEM CODE AND REMARK
		            for (int i =0; i < TField.length; i++) {
						if (i == 0) {
						} else if (i > 0 && i < 7){
							TField[i].setEditable(true);
						} else if (i == 7){
							TField[i].setEditable(false);
						}
					}
			        
		            //DISABLES ALL BUTTONS BUT SAVE AND CANCEL
			        Buttons1[0].setEnabled(false);
					Buttons1[1].setEnabled(false);
					Buttons1[2].setEnabled(false);
					Buttons2[0].setEnabled(false);
					Buttons2[1].setEnabled(true);
					Buttons2[2].setEnabled(true);
					
					Buttons2[1].addActionListener(new ActionListener() { //SAVE
						public void actionPerformed(ActionEvent e) {
							//GETS THE VALUES AND CHANGES IT BASED ON THE SELECTED ROW AND THE COLUMN OF THE CELL DATA
							Table.setValueAt(TField[1].getText(), selectedRow, 1);
							Table.setValueAt(TField[2].getText(), selectedRow, 2);
							Table.setValueAt(TField[3].getText(), selectedRow, 3);
							Table.setValueAt(TField[4].getText(), selectedRow, 4);
							Table.setValueAt(TField[5].getText(), selectedRow, 5);
							Table.setValueAt(TField[6].getText(), selectedRow, 6);
							

							//REMARKS IF EMPTY/INVALID FOR STOCK THEN OUTPUT NONE
							//REMARKS IF NUMBER HIGH OR LOW BASED ON STOCKCOUNTLIMIT ON LINE 22
							if(TField[5].getText().isBlank() || !TField[5].getText().matches("[0-9]+")) {
								Table.setValueAt("", selectedRow, 7);
							} else if (Integer.parseInt(TField[5].getText()) > StockCountLimit) {
								Table.setValueAt("High Stock", selectedRow, 7);
							} else {
								Table.setValueAt("Low Stock", selectedRow, 7);
							}
							
							for (int i =0; i < TField.length; i++) {
								TField[i].setEditable(false);
							}
							
							//ENABLES ALL BUTTONS BUT SAVE AND CANCEL THEN REMOVE THE ACTION LISTENER FOR SAVE AND CANCEL
							Buttons1[0].setEnabled(true);
							Buttons1[1].setEnabled(true);
							Buttons1[2].setEnabled(true);
							Buttons2[0].setEnabled(true);
							Buttons2[1].setEnabled(false);
							Buttons2[2].setEnabled(false);
							Buttons2[1].removeActionListener(Buttons2[1].getActionListeners()[0]);
							Buttons2[2].removeActionListener(Buttons2[2].getActionListeners()[0]);
						}
					});
					
					Buttons2[2].addActionListener(new ActionListener() { //CANCEL
						public void actionPerformed(ActionEvent e) {
							
							//UPDATES TEXTFIELD DATA 
							int selectedRow = Table.getSelectedRow();
					        if (selectedRow >= 0) { 
					            for (int i = 0; i < Model.getColumnCount(); i++) {
					                TField[i].setText((String) Table.getValueAt(selectedRow, i));
					            }
					        }
							
					        //DISABLES TEXTFIELDS
					        for (int i =0; i < TField.length; i++) {
					        	TField[i].setEditable(false);
							}
					        
					      //ENABLES ALL BUTTONS BUT SAVE AND CANCEL THEN REMOVE THE ACTION LISTENER FOR SAVE AND CANCEL
							Buttons1[0].setEnabled(true);
							Buttons1[1].setEnabled(true);
							Buttons1[2].setEnabled(true);
							Buttons2[0].setEnabled(true);
							Buttons2[1].setEnabled(false);
							Buttons2[2].setEnabled(false);
							Buttons2[1].removeActionListener(Buttons2[1].getActionListeners()[0]);
							Buttons2[2].removeActionListener(Buttons2[2].getActionListeners()[0]);
						}
					});
		        } else {
		        	JOptionPane.showMessageDialog(null, "Select an Item first", "No Item selected", JOptionPane.WARNING_MESSAGE);
		        }
		    }
		});
		
		Buttons2[0].addActionListener(new ActionListener() { //DELETE
			public void actionPerformed(ActionEvent e) {
			    int selectedRow = Table.getSelectedRow();
			    if (selectedRow >= 0) {
			    	int Conf = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this item?", "Delete Item", JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
			        if (Conf == JOptionPane.YES_OPTION) {
			        	Model.removeRow(selectedRow); //REMOVES SELECTED ROW
				        for (int i = 0; i < TField.length; i++) { //REMOVES ALL PREVIOUS DATA FROM TEXTFIELD KASI ERROR PAG HINDI!!!!!!
				            TField[i].setText("");
				        }
			        }
			    } else {
			        JOptionPane.showMessageDialog(null, "Select an Item first", "No Item selected", JOptionPane.WARNING_MESSAGE);
			    }
			}
		});
		
		Table.getTableHeader().setEnabled(false); //DISABLES HEADER
		
		//CENTER DATA
		DefaultTableCellRenderer Center = new DefaultTableCellRenderer(); 
		Center.setHorizontalAlignment(JLabel.CENTER); 
		
		for (int i = 0; i < Row.length; i++) {
		    Table.getColumnModel().getColumn(i).setCellRenderer(Center);
		}
		
		//REMOVES THE EXTRA NULL ROWS FROM THE COLUMN ARRAY FOR IT TO CENTER ALL DATA
		for (int i = 7; i >= 0; i--) {
			Model.removeRow(i);
		}
		
		Table.setRowHeight(20); //CHANGE TO CHANGE HOW THICK CELLS ARE
		
		//CHANGE HOW LONG THEY ARE
		TableColumnModel Colm = Table.getColumnModel();
		int[] Wid = {
			70, 120, 150, 70, 90, 70, 120, 120 //ONLY EDIT THIS 
		};
		
		for (int i = 0; i < Wid.length; i++) {
			Colm.getColumn(i).setPreferredWidth(Wid[i]);
		}
		
		//OTHERS
		Buttons2[1].setEnabled(false);
		Buttons2[2].setEnabled(false);
		Panel.setBounds(450, 20, 450, 370);
		Panel.add(Scroll);
		
		add(Panel);
		add(Info);
		setLayout(null);
		setVisible(true);
	}
}